import heapq
def solution(food_times, k):
    # 전체 음식을 먹는 시간보다 k가 크거나 같다면 -1
    if sum(food_times) <= k:
        return -1
    food_idx = [] # (음식 섭취 시간, 음식 번호)
    for i in range(len(food_times)): # 우선순위 큐에 삽입
        heapq.heappush(food_idx, (food_times[i], i+1))
    
    sum_value = 0 # 먹기 위해 사용한 시간
    previous = 0 # 직전에 다 먹은 음식 시간
    length = len(food_times) # 남은 음식의 개수
    # 먹기 위해 사용한 시간 + (현재의 음식 시간 - 이전 음식 시간) * 남은 음식의 개수 가 k시간보다 작거나 같을 때
    while sum_value + (food_idx[0][0] - previous) * length <= k:
        now = heapq.heappop(food_idx)[0]
        sum_value += (now - previous) * length
        length -= 1 # 다 먹은 음식 제외
        previous = now # 이전 음식 시간 재설정
    
    # 남은 음식 중 몇 번째 음식인지 확인하여 출력
    result = sorted(food_idx, key = lambda x:x[1]) # 음식 번호 기준으로 정렬 (원래 순서대로 만듦)
    # print(result, k, sum_value, length)
    # k 시간에서 먹기 위해 사용한 시간을 뺀 남은 시간에서, 남은 음식의 개수로 나눈 나머지
    return result[(k-sum_value) % length][1]