# dfs를 사용하여 한 붓 그리기

def solution(tickets):
    # 사전을 이용하여 각 공항에서 출발하는 항공권의 리스트(알파벳 순서 유지)를 표현
    # 단 알파벳 역순으로 넣기 리스트는 뒤에서 접근하는것이 빠르므로
    routes = {}
    for t in tickets:
        # 처음 등장할 경우 빈 리스트, 존재할 경우 리스트 병합
        routes[t[0]] = routes.get(t[0], []) + [t[1]]
    # 알파벳 역순으로 정렬
    for r in routes:
        routes[r].sort(reverse=True)
    
    stack = ["ICN"] # 인천공항 출발
    path = [] # 경로
    while len(stack) > 0: # 스택에 있는 원소들이 없어질 때까지
        top = stack[-1]
        # 어떤 공항에서 출발하는 경로가 없거나, 있었는데 다 써버린 경우
        if top not in routes or len(routes[top]) == 0:
            path.append(stack.pop())
        # 갈 수 있는 공항이 있는 경우
        else:
            stack.append(routes[top][-1]) # top에 있는 공항에서 갈 수 있는 공항 중 알파벳 순서
            routes[top] = routes[top][:-1] # 맨 끝에 원소 지우기
    return path[::-1] # path 역순


'''
tickets = [["ICN", "A"], ["B", "ICN"], ["ICN", "B"]]

routes
{'ICN': ['B', 'A'], 'B': ['ICN']}

ICN에서 A 먼저 방문 
A 가 routes에 없으므로 path 에 [A]
ICN에서 B 방문
B에서 ICN 방문
ICN 에서 티켓 다 썼으므로 path에 [A, ICN, B, ICN]

path 역순으로 리턴
'''