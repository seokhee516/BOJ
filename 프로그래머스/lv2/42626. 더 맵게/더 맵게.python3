import heapq
def solution(scoville, K):
    answer = 0
    heapq.heapify(scoville) # 힙정렬
    while scoville: # 스코빌 리스트 존재하는 동안 실행
        if scoville[0] < K: # 가장 작은 원소가 K 보다 작은 경우
            if len(scoville) <= 1: # 길이가 1인 경우 K이상으로 만들 수 없으므로 -1 리턴
                return -1
            else:
                first = heapq.heappop(scoville) # 가장 맵지 않은 음식의 스코빌 지수
                second = heapq.heappop(scoville) # 두 번째로 맵지 않은 음식의 스코빌 지수
                heapq.heappush(scoville, first + second*2) # 힙 정렬 유지하면서 넣어준다
                answer += 1 # 섞은 횟수 추가
        else: # 가장 작은 원소가 K 보다 큰 경우 종료
            break   
    return answer
'''
1. 힙에서 가장 작은 원소와 그 다음으로 작은 원소
인덱스 0에 가장 작은 원소가 있다고 해서, 인덱스 1에 두번째 작은 원소, 인덱스 2에 세번째 작은 원소가 있다는 보장은 없다. 
왜냐하면 힙은 heappop() 함수를 호출하여 원소를 삭제할 때마다 이진 트리의 재배치를 통해 매번 새로운 최소값을 인덱스 0에 위치시키기 때문.
따라서 두번째로 작은 원소를 얻으려면 바로 heap[1]으로 접근하면 안되고, 
반드시 heappop()을 통해 가장 작은 원소를 삭제 후에 heap[0]를 통해 새로운 최소값에 접근해야 한다.

2. heapify 와 heappush
효율성 테스트에서 계속 통과를 못했는데 heapify의 시간복잡도가 O(N)이고 최대 길이가 1,000,000이기 때문
heappush의 시간 복잡도는 O(logn)이므로, 힙정렬 + 가장 작은 원소 빼는 과정을 실행한다
 
3. pop 과 heappop의 차이 
heappop()은 O(logn)의 시간 복잡도로 가장 작은 원소를 리턴한다
가장 앞에 있는 자료를 삭제 시 (list.pop(0)) 배열에 있는 모든 데이터를 조회하여 한칸 씩 옮겨주는 작업이 필요하므로 O(n)의 시간 복잡도로 수행
참고로 deque의 popleft는 O(1)의 시간 복잡도가 걸리지만 현재 문제는 가장 작은 원소를 찾는 과정이 필요하므로 heappop을 사용하는 것이 적절하다.
'''
