# 이게 뭔소리고... 문제 이해도 안되넹ㅎㅎㅎ
# 상어가 먹은 다음에 물고기 위치를 바꾸는게 이해하기 어려움
# 재귀로 최댓값 찾는게 어려움 + deep copy로 해줬어야 함
# 물고기 찾는게 시간초과 나지 않을까 생각했는데 어차피 4*4라 그냥 냅다 이중 for문 돌려버리네
import sys
input = sys.stdin.readline
import copy

# 4 x 4 크기의 정사각형에 존재하는 각 물고기의 번호(없으면-1)와 방향 값을 담는 테이블
array = [[None] * 4 for _ in range(4)]
for i in range(4):
    data = list(map(int, input().split()))
    # 매 줄마다 4마리의 물고기를 하나씩 확인하며
    for j in range(4):
        # 각 위치마다 [물고기의 번호, 방향]을 저장
        array[i][j] = [data[j*2], data[j*2+1]-1]
# ↑, ↖, ←, ↙, ↓, ↘, →, ↗
dx = [-1, -1, 0, 1, 1, 1, 0, -1] 
dy = [0, -1, -1, -1, 0, 1, 1, 1]

# 45도 반시계 회전 결과 반환
def turn_left(direction):
    return (direction + 1) % 8

result = 0 # 최종 결과

# 현재 배열에서 특정한 번호의 물고기 위치 찾기
# 걍 2중 for문으로 냅다 찾기!
def find_fish(array, index):
    for i in range(4): 
        for j in range(4):
            if array[i][j][0] == index:
                return (i,j)
    return None

# 모든 물고기를 회전 및 이동시키는 함수
def move_all_fishes(array, now_x, now_y):
    # 1번부터 16번까지의 물고기를 차례대로 (낮은 번호부터) 확인
    for i in range(1, 17):
        # 해당 물고기의 위치 찾기
        position = find_fish(array, i)
        if position != None:
            x, y = position[0], position[1]
            direction = array[x][y][1]
            # 해당 물고기의 방향을 왼쪽으로 계속 회전시키며 이동이 가능한지 확인
            for j in range(8):
                nx = x + dx[direction]
                ny = y + dy[direction]
                # 해당 방향으로 이동이 가능하다면 이동시키기
                if 0 <= nx < 4 and 0 <= ny < 4:
                    if not (nx==now_x and ny==now_y):
                        # 물고기가 있는 칸으로 이동할 때는 서로의 위치를 바꾸는 방식으로 이동
                        array[x][y][1] = direction
                        array[x][y], array[nx][ny] = array[nx][ny], array[x][y] 
                        break
                # 이동할 수 있는 칸을 향할 때까지 방향을 45도 반시계 회전
                direction = turn_left(direction)

# 상어가 현재 위치에서 먹을 수 있는 모든 물고기의 위치 반환
def get_possible_positions(array, now_x, now_y):
    positions = []
    direction = array[now_x][now_y][1] # 상어가 물고기의 방향 가지기
    # 현재 방향으로 계속 이동시키기
    for i in range(4):
        now_x += dx[direction]
        now_y += dy[direction]
        # 범위를 벗어나지 않는지 확인하며
        if 0 <= now_x < 4 and 0 <= now_y < 4:
            # 물고기가 존재하는 경우
            if array[now_x][now_y][0] != -1:
                positions.append((now_x, now_y))
    return positions

# 모든 경우를 탐색하기 위한 DFS 함수
def dfs(array, now_x, now_y, total):
    global result
    array = copy.deepcopy(array) # 리스트를 통째로 복사
    total += array[now_x][now_y][0] # 현재 위치의 물고기 먹기
    array[now_x][now_y][0] = -1 # 물고기를 먹었으므로 번호 값을 -1로 변환
    move_all_fishes(array, now_x, now_y) # 전체 물고기 이동시키기
    # 이제 다시 상어가 이동할 차례이므로, 이동 가능한 위치 찾기
    positions = get_possible_positions(array, now_x, now_y)
    # 이동할 수 있는 위치가 하나도 없다면 종료
    if len(positions) == 0:
        result = max(result, total)
        return 
    # 모든 이동할 수 있는 위치로 재귀적 수행
    for next_x, next_y in positions:
        dfs(array, next_x, next_y, total)

# 청소년 상어의 시작 위치 (0,0)에서부터 재귀적으로 모든 경우 탐색
dfs(array, 0, 0, 0)
print(result)

'''
# 1
[[[-1, 5], [2, 2], [15, 5], [9, 7]], # (0,0)에서 시작
[[3, 0], [1, 7], [14, 6], [10, 0]], 
[[6, 0], [13, 5], [4, 2], [11, 3]], 
[[16, 0], [8, 6], [5, 1], [12, 1]]] 
7 # 상어가 물고기 먹음
[(1, 1), (2, 2), (3, 3)] # 상어가 갈 수 있는 칸

[[[-1, 5], [2, 3], [9, 2], [10, 0]], 
[[6, 0], [-1, 1], [1, 7], [14, 6]], # 12 먹음

# 2
[[[7, 5], [2, 2], [15, 5], [9, 7]], # (0,0)에서 시작
[[3, 0], [1, 7], [14, 6], [10, 0]], 
[[6, 0], [13, 5], [4, 2], [11, 3]], 
[[16, 0], [8, 6], [5, 1], [12, 1]]] 상어가 먹기 전
7 상어가 먹음
[[[-1, 5], [2, 3], [9, 2], [10, 0]], 
[[6, 0], [12, 1], [1, 7], [14, 6]], 
[[16, 0], [5, 1], [15, 5], [13, 0]], 
[[3, 3], [4, 2], [11, 3], [8, 6]]] 물고기 이동
[(1, 1), (2, 2), (3, 3)] 상어가 갈 수 있는 칸

# 3
[[[-1, 5], [2, 3], [9, 2], [10, 0]], 
[[6, 0], [12, 1], [1, 7], [14, 6]], # (1, 1) 12 먹음
[[16, 0], [5, 1], [15, 5], [13, 0]], 
[[3, 3], [4, 2], [11, 3], [8, 6]]] 상어가 먹기 전
19 상어가 먹음
[[[6, 2], [9, 2], [10, 0], [14, 0]], 
[[16, 0], [-1, 1], [-1, 5], [1, 7]], 
[[5, 1], [2, 3], [13, 0], [8, 0]], 
[[3, 6], [4, 6], [11, 6], [15, 6]]] 물고기 이동
[(0, 0)] 상어가 갈 수 있는 칸

# 4
[[[6, 2], [9, 2], [10, 0], [14, 0]], # (0, 0) 6 먹음
[[16, 0], [-1, 1], [-1, 5], [1, 7]], 
[[5, 1], [2, 3], [13, 0], [8, 0]], 
[[3, 6], [4, 6], [11, 6], [15, 6]]] 상어가 먹기 전
25 상어가 먹음
[[[-1, 2], [16, 2], [10, 2], [1, 0]], 
[[9, 3], [13, 0], [-1, 5], [14, 0]], 
[[2, 3], [-1, 1], [3, 6], [15, 0]], 
[[5, 4], [4, 6], [11, 6], [8, 0]]] 물고기 이동
[] 상어가 갈 수 있는 칸 # 재귀 끝남

# 2 재귀 불러옴
[[[-1, 5], [2, 3], [9, 2], [10, 0]], 
[[6, 0], [12, 1], [1, 7], [14, 6]], 
[[16, 0], [5, 1], [15, 5], [13, 0]], # (2,2) 15 먹음
[[3, 3], [4, 2], [11, 3], [8, 6]]] 상어가 먹기 전
22 상어가 먹음
[[[12, 1], [9, 2], [10, 0], [14, 0]], 
[[16, 0], [6, 2], [-1, 5], [1, 7]], 
[[5, 1], [13, 1], [-1, 5], [8, 0]], 
[[3, 6], [4, 6], [2, 3], [11, 6]]] 물고기 이동
[(3, 3)] 상어가 갈 수 있는 칸

[[[12, 1], [9, 2], [10, 0], [14, 0]], 
[[16, 0], [6, 2], [-1, 5], [1, 7]], 
[[5, 1], [13, 1], [-1, 5], [8, 0]], 
[[3, 6], [4, 6], [2, 3], [11, 6]]] 상어가 먹기 전 # (3,3) 11 먹음
33 상어가 먹음
[[[9, 2], [16, 0], [10, 2], [14, 0]], 
[[13, 1], [12, 2], [-1, 5], [1, 0]], 
[[3, 6], [6, 2], [8, 0], [2, 7]], 
[[5, 4], [4, 6], [-1, 5], [-1, 6]]] 물고기 이동
[] 상어가 갈 수 있는 칸 # 재귀 끝

# 2 재귀 불러옴
[[[-1, 5], [2, 3], [9, 2], [10, 0]], 
[[6, 0], [12, 1], [1, 7], [14, 6]], 
[[16, 0], [5, 1], [15, 5], [13, 0]], 
[[3, 3], [4, 2], [11, 3], [8, 6]]] 상어가 먹기 전 # (3,3) 8 먹음
15 상어가 먹음
[[[12, 1], [9, 2], [10, 0], [14, 0]], 
[[16, 0], [6, 2], [-1, 5], [1, 7]], 
[[5, 1], [2, 3], [13, 0], [15, 7]], 
[[3, 6], [4, 6], [11, 7], [-1, 6]]] 물고기 이동
[] 상어가 갈 수 있는 칸

# 최댓값 result
33
'''