import sys 
from collections import deque
input = sys.stdin.readline
N, M = map(int, input().split())
graph = [list(map(int, input().strip())) for _ in range(N)]
# 배열을 3차원으로 만들어줌 [벽 부쉈을 때, 벽 부수지 않았을 때]
visited = [[[0]*2 for _ in range(M)] for _ in range(N)]

dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]
# 벽 부술 수 있는 기회 chance 
def bfs(x=0, y=0, chance=1):
    q = deque()
    q.append((x,y,chance))
    # 1로 시작 벽 부수지 않았을 때
    visited[x][y][1] = 1
    while q:
        x, y, chance = q.popleft()
        for i in range(4):
            nx = x + dx[i]
            ny = y + dy[i]
            # 다음 노드가 맵 안에 있을 때 & 처음 방문한 노드일 때
            if nx >= 0 and nx < N and ny >= 0 and ny < M and visited[nx][ny][chance]==0:
                # 벽 없을 때
                if graph[nx][ny] == 0:
                    q.append((nx,ny,chance))
                    visited[nx][ny][chance] = visited[x][y][chance] + 1
                # 벽이 있고, 기회 남았을 때
                if chance == 1 and graph[nx][ny] == 1:
                    # chance = 0
                    q.append((nx,ny,0))
                    # 이전 노드에서 더해줌
                    visited[nx][ny][0] = visited[x][y][chance] + 1
    return visited[N-1][M-1][chance]
answer = bfs()
if answer == 0:
    print(-1)
else:
    print(answer)

'''
출력 예시
3 3
001
101
010
[[[0, 1], [0, 0], [0, 0]], [[2, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]]
[[[0, 1], [0, 2], [0, 0]], [[2, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]]
[[[3, 1], [0, 2], [0, 0]], [[2, 0], [0, 0], [0, 0]], [[0, 0], [0, 0], [0, 0]]]
[[[3, 1], [0, 2], [0, 0]], [[2, 0], [0, 0], [0, 0]], [[3, 0], [0, 0], [0, 0]]]
[[[3, 1], [0, 2], [0, 0]], [[2, 0], [3, 0], [0, 0]], [[3, 0], [0, 0], [0, 0]]]
[[[3, 1], [0, 2], [0, 0]], [[2, 0], [3, 3], [0, 0]], [[3, 0], [0, 0], [0, 0]]]
[[[3, 1], [0, 2], [3, 0]], [[2, 0], [3, 3], [0, 0]], [[3, 0], [0, 0], [0, 0]]]
[[[3, 1], [4, 2], [3, 0]], [[2, 0], [3, 3], [0, 0]], [[3, 0], [0, 0], [0, 0]]]
[[[3, 1], [4, 2], [3, 0]], [[2, 0], [3, 3], [0, 0]], [[3, 0], [4, 0], [0, 0]]]
[[[3, 1], [4, 2], [3, 0]], [[4, 0], [3, 3], [0, 0]], [[3, 0], [4, 0], [0, 0]]]
[[[3, 1], [4, 2], [3, 0]], [[4, 0], [3, 3], [4, 0]], [[3, 0], [4, 0], [0, 0]]]
[[[3, 1], [4, 2], [3, 0]], [[4, 0], [3, 3], [4, 0]], [[3, 0], [4, 0], [5, 0]]]
5
'''